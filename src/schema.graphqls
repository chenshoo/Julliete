type User{
    id: String
    email: String
    userInfo: UserInformation

}

input UserInput{
    email: String
    password: String
    userInfo: UserInformationInput
}

type UserInformation{
    privateName: String
    lastName: String
    gender: Gender
    dateOfBirth: CustomDate
    phoneNumber: String
    initialPanicAttackDate: CustomDate
    sleep: SleepingHours
    emergencyContacts: [Contact]
    isShabbatKeeper: Boolean
    isSmoking: Boolean
    familyStatus: FamilyStatus
    traumaType: TraumaType
    medicalInformation: MedicalInformation
    address: Address
    stressHours: [Int]
    stressfullPlaces: [String]
}

input UserInformationInput{
    privateName: String
    lastName: String
    gender: Gender
    dateOfBirth: CustomDateInput
    phoneNumber: String
    initialPanicAttackDate: CustomDateInput
    sleep: SleepingHoursInput
    emergencyContacts: [ContactInput]
    isShabbatKeeper: Boolean
    isSmoking: Boolean
    familyStatus: FamilyStatusInput
    traumaType: TraumaType
    medicalInformation: MedicalInformationInput
    address: AddressInput
    stressHours: [Int]
    stressfullPlaces: [String]
}

#type UserInformation{
#    privateName: String
#    lastName: String
#    gender: Gender
#    dateOfBirth: CustomDate
#    phoneNumber: String
#    initialPanicAttackDate: CustomDate
#    sleep: SleepingHours
#    emergencyContacts: [Contact]
#    isShabbatKeeper: Boolean
#    isSmoking: Boolean
#    familyStatus: FamilyStatus
#    traumaType: TraumaType
#    medicalInformation: MedicalInformation
#    address: Address
#    stressHours: [Int]
#    stressfullPlaces: [String]
#}

input AddressInput{
    state: String
    city: String
    street: String
    apartment: String
}

type Address{
    state: String
    city: String
    street: String
    apartment: String
}

input MedicalInformationInput{
    isTaking: Boolean
    drugs: [String]
}

type MedicalInformation{
    isTaking: Boolean
    drugs: [String]
}

enum Gender{
    MALE,
    FEMALE
}

enum TraumaType{
    SEX_ASSAULT
    ARMY
}

input FamilyStatusInput{
    isMarried: Boolean
    numberOfChildren: Int
}


type FamilyStatus{
    isMarried: Boolean
    numberOfChildren: Int
}


type Contact{
    phoneNumber: String
    name: String
}

input ContactInput{
    phoneNumber: String
    name: String
}


type CustomDate{
    day: String
    month: String
    year: String
}

input CustomDateInput{
    day: String
    month: String
    year: String
}


type SleepingHours{
    bedHour: Int
    wakingHour: Int
}

input SleepingHoursInput{
    bedHour: Int
    wakingHour: Int
}

type Query {
    user: String

}

input LocationInput{
    long: Float
    lat: Float
}

type Mutation{
    sendUserLocation(userId: String, location: LocationInput): Boolean
    registerUser(user: UserInput): Boolean
}
