/* tslint:disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  users?: Array<GQLUser | null>;
}

export interface GQLUser {
  id?: string;
  email?: string;
  userInfo?: GQLUserInformation;
}

export interface GQLUserInformation {
  privateName?: string;
  lastName?: string;
  gender?: GQLGender;
  dateOfBirth?: GQLCustomDate;
  phoneNumber?: string;
  initialPanicAttackDate?: GQLCustomDate;
  sleep?: GQLSleepingHours;
  emergencyContacts?: Array<GQLContact | null>;
  isShabbatKeeper?: boolean;
  isSmoking?: boolean;
  familyStatus?: GQLFamilyStatus;
  traumaType?: GQLTraumaType;
  medicalInformation?: GQLMedicalInformation;
  address?: GQLAddress;
  stressHours?: Array<number | null>;
  stressfullPlaces?: Array<string | null>;
}

export enum GQLGender {
  MALE = 'MALE',
  FEMALE = 'FEMALE'
}

export interface GQLCustomDate {
  day?: string;
  month?: string;
  year?: string;
}

export interface GQLSleepingHours {
  bedHour?: number;
  wakingHour?: number;
}

export interface GQLContact {
  phoneNumber?: string;
  name?: string;
}

export interface GQLFamilyStatus {
  isMarried?: boolean;
  numberOfChildren?: number;
}

export enum GQLTraumaType {
  SEX_ASSAULT = 'SEX_ASSAULT',
  ARMY = 'ARMY'
}

export interface GQLMedicalInformation {
  isTaking?: boolean;
  drugs?: Array<string | null>;
}

export interface GQLAddress {
  state?: string;
  city?: string;
  street?: string;
  apartment?: string;
}

export interface GQLMutation {
  sendUserLocation?: boolean;
  registerUser?: boolean;
  login?: boolean;
}

export interface GQLLocationInput {
  long?: number;
  lat?: number;
}

export interface GQLUserInput {
  email?: string;
  password?: string;
  userInfo?: GQLUserInformationInput;
}

export interface GQLUserInformationInput {
  privateName?: string;
  lastName?: string;
  gender?: GQLGender;
  dateOfBirth?: GQLCustomDateInput;
  phoneNumber?: string;
  initialPanicAttackDate?: GQLCustomDateInput;
  sleep?: GQLSleepingHoursInput;
  emergencyContacts?: Array<GQLContactInput | null>;
  isShabbatKeeper?: boolean;
  isSmoking?: boolean;
  familyStatus?: GQLFamilyStatusInput;
  traumaType?: GQLTraumaType;
  medicalInformation?: GQLMedicalInformationInput;
  address?: GQLAddressInput;
  stressHours?: Array<number | null>;
  stressfullPlaces?: Array<string | null>;
}

export interface GQLCustomDateInput {
  day?: string;
  month?: string;
  year?: string;
}

export interface GQLSleepingHoursInput {
  bedHour?: number;
  wakingHour?: number;
}

export interface GQLContactInput {
  phoneNumber?: string;
  name?: string;
}

export interface GQLFamilyStatusInput {
  isMarried?: boolean;
  numberOfChildren?: number;
}

export interface GQLMedicalInformationInput {
  isTaking?: boolean;
  drugs?: Array<string | null>;
}

export interface GQLAddressInput {
  state?: string;
  city?: string;
  street?: string;
  apartment?: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  User?: GQLUserTypeResolver;
  UserInformation?: GQLUserInformationTypeResolver;
  CustomDate?: GQLCustomDateTypeResolver;
  SleepingHours?: GQLSleepingHoursTypeResolver;
  Contact?: GQLContactTypeResolver;
  FamilyStatus?: GQLFamilyStatusTypeResolver;
  MedicalInformation?: GQLMedicalInformationTypeResolver;
  Address?: GQLAddressTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  users?: QueryToUsersResolver<TParent>;
}

export interface QueryToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  userInfo?: UserToUserInfoResolver<TParent>;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUserInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserInformationTypeResolver<TParent = any> {
  privateName?: UserInformationToPrivateNameResolver<TParent>;
  lastName?: UserInformationToLastNameResolver<TParent>;
  gender?: UserInformationToGenderResolver<TParent>;
  dateOfBirth?: UserInformationToDateOfBirthResolver<TParent>;
  phoneNumber?: UserInformationToPhoneNumberResolver<TParent>;
  initialPanicAttackDate?: UserInformationToInitialPanicAttackDateResolver<TParent>;
  sleep?: UserInformationToSleepResolver<TParent>;
  emergencyContacts?: UserInformationToEmergencyContactsResolver<TParent>;
  isShabbatKeeper?: UserInformationToIsShabbatKeeperResolver<TParent>;
  isSmoking?: UserInformationToIsSmokingResolver<TParent>;
  familyStatus?: UserInformationToFamilyStatusResolver<TParent>;
  traumaType?: UserInformationToTraumaTypeResolver<TParent>;
  medicalInformation?: UserInformationToMedicalInformationResolver<TParent>;
  address?: UserInformationToAddressResolver<TParent>;
  stressHours?: UserInformationToStressHoursResolver<TParent>;
  stressfullPlaces?: UserInformationToStressfullPlacesResolver<TParent>;
}

export interface UserInformationToPrivateNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToDateOfBirthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToPhoneNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToInitialPanicAttackDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToSleepResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToEmergencyContactsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToIsShabbatKeeperResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToIsSmokingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToFamilyStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToTraumaTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToMedicalInformationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToStressHoursResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInformationToStressfullPlacesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomDateTypeResolver<TParent = any> {
  day?: CustomDateToDayResolver<TParent>;
  month?: CustomDateToMonthResolver<TParent>;
  year?: CustomDateToYearResolver<TParent>;
}

export interface CustomDateToDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomDateToMonthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomDateToYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSleepingHoursTypeResolver<TParent = any> {
  bedHour?: SleepingHoursToBedHourResolver<TParent>;
  wakingHour?: SleepingHoursToWakingHourResolver<TParent>;
}

export interface SleepingHoursToBedHourResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SleepingHoursToWakingHourResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContactTypeResolver<TParent = any> {
  phoneNumber?: ContactToPhoneNumberResolver<TParent>;
  name?: ContactToNameResolver<TParent>;
}

export interface ContactToPhoneNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFamilyStatusTypeResolver<TParent = any> {
  isMarried?: FamilyStatusToIsMarriedResolver<TParent>;
  numberOfChildren?: FamilyStatusToNumberOfChildrenResolver<TParent>;
}

export interface FamilyStatusToIsMarriedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FamilyStatusToNumberOfChildrenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMedicalInformationTypeResolver<TParent = any> {
  isTaking?: MedicalInformationToIsTakingResolver<TParent>;
  drugs?: MedicalInformationToDrugsResolver<TParent>;
}

export interface MedicalInformationToIsTakingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalInformationToDrugsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddressTypeResolver<TParent = any> {
  state?: AddressToStateResolver<TParent>;
  city?: AddressToCityResolver<TParent>;
  street?: AddressToStreetResolver<TParent>;
  apartment?: AddressToApartmentResolver<TParent>;
}

export interface AddressToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToApartmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  sendUserLocation?: MutationToSendUserLocationResolver<TParent>;
  registerUser?: MutationToRegisterUserResolver<TParent>;
  login?: MutationToLoginResolver<TParent>;
}

export interface MutationToSendUserLocationArgs {
  userId?: string;
  location?: GQLLocationInput;
}
export interface MutationToSendUserLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendUserLocationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRegisterUserArgs {
  user?: GQLUserInput;
}
export interface MutationToRegisterUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRegisterUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLoginArgs {
  email?: string;
  password?: string;
}
export interface MutationToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}
